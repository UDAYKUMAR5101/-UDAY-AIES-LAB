import numpy as np
import math
import random

def distance(city1, city2):
    return np.linalg.norm(city1 - city2)

def total_distance(path, cities):
    total = 0
    for i in range(len(path) - 1):
        total += distance(cities[path[i]], cities[path[i + 1]])
    total += distance(cities[path[-1]], cities[path[0]])  # Return to the starting city
    return total

def simulated_annealing(cities, initial_temperature=1000, cooling_rate=0.003, stopping_temperature=0.01):
    current_path = list(range(len(cities)))  # Initial path: [0, 1, 2, ..., n-1]
    random.shuffle(current_path)  # Randomly shuffle the initial path
    current_cost = total_distance(current_path, cities)

    temperature = initial_temperature
    while temperature > stopping_temperature:
        # Generate a random neighboring solution
        new_path = current_path.copy()
        i, j = random.sample(range(len(cities)), 2)
        new_path[i], new_path[j] = new_path[j], new_path[i]
        new_cost = total_distance(new_path, cities)

        # Calculate the acceptance probability
        acceptance_probability = min(1, math.exp((current_cost - new_cost) / temperature))

        # Decide whether to accept the new solution
        if random.random() < acceptance_probability:
            current_path = new_path
            current_cost = new_cost

        # Cool down the temperature
        temperature *= 1 - cooling_rate

    return current_path, current_cost

# Example usage
cities = np.array([
    [0, 0],
    [1, 3],
    [2, 5],
    [6, 2],
    [8, 7]
])
best_path, best_cost = simulated_annealing(cities)
print("Best path:", best_path)
print("Total distance:", best_cost)
